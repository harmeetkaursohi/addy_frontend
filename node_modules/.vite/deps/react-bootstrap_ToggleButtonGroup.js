import {
  ToggleButton_default
} from "./chunk-2DCCCZPE.js";
import {
  require_browser,
  useUncontrolled
} from "./chunk-JTGYY4SZ.js";
import "./chunk-IA3BO3AX.js";
import "./chunk-MNJCCSQT.js";
import "./chunk-SMHYBUCF.js";
import {
  require_jsx_runtime,
  useBootstrapPrefix
} from "./chunk-BFNYIB6F.js";
import {
  require_classnames
} from "./chunk-RRZL6MJU.js";
import "./chunk-AMSNYDMP.js";
import "./chunk-DYCIHN6K.js";
import {
  require_react
} from "./chunk-HS5T2ZWL.js";
import {
  __toESM
} from "./chunk-AUZ3RYOM.js";

// node_modules/react-bootstrap/esm/ToggleButtonGroup.js
var React3 = __toESM(require_react());
var import_invariant = __toESM(require_browser());

// node_modules/react-bootstrap/esm/createChainedFunction.js
function createChainedFunction(...funcs) {
  return funcs.filter((f) => f != null).reduce((acc, f) => {
    if (typeof f !== "function") {
      throw new Error("Invalid Argument Type, must only provide functions, undefined, or null.");
    }
    if (acc === null)
      return f;
    return function chainedFunction(...args) {
      acc.apply(this, args);
      f.apply(this, args);
    };
  }, null);
}
var createChainedFunction_default = createChainedFunction;

// node_modules/react-bootstrap/esm/ElementChildren.js
var React = __toESM(require_react());
function map(children, func) {
  let index = 0;
  return React.Children.map(children, (child) => React.isValidElement(child) ? func(child, index++) : child);
}

// node_modules/react-bootstrap/esm/ButtonGroup.js
var import_classnames = __toESM(require_classnames());
var React2 = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var ButtonGroup = React2.forwardRef(({
  bsPrefix,
  size,
  vertical = false,
  className,
  role = "group",
  // Need to define the default "as" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595
  as: Component = "div",
  ...rest
}, ref) => {
  const prefix = useBootstrapPrefix(bsPrefix, "btn-group");
  let baseClass = prefix;
  if (vertical)
    baseClass = `${prefix}-vertical`;
  return (0, import_jsx_runtime.jsx)(Component, {
    ...rest,
    ref,
    role,
    className: (0, import_classnames.default)(className, baseClass, size && `${prefix}-${size}`)
  });
});
ButtonGroup.displayName = "ButtonGroup";
var ButtonGroup_default = ButtonGroup;

// node_modules/react-bootstrap/esm/ToggleButtonGroup.js
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var ToggleButtonGroup = React3.forwardRef((props, ref) => {
  const {
    children,
    type = "radio",
    name,
    value,
    onChange,
    vertical = false,
    ...controlledProps
  } = useUncontrolled(props, {
    value: "onChange"
  });
  const getValues = () => value == null ? [] : [].concat(value);
  const handleToggle = (inputVal, event) => {
    if (!onChange) {
      return;
    }
    const values = getValues();
    const isActive = values.indexOf(inputVal) !== -1;
    if (type === "radio") {
      if (!isActive)
        onChange(inputVal, event);
      return;
    }
    if (isActive) {
      onChange(values.filter((n) => n !== inputVal), event);
    } else {
      onChange([...values, inputVal], event);
    }
  };
  !(type !== "radio" || !!name) ? true ? (0, import_invariant.default)(false, 'A `name` is required to group the toggle buttons when the `type` is set to "radio"') : (0, import_invariant.default)(false) : void 0;
  return (0, import_jsx_runtime2.jsx)(ButtonGroup_default, {
    ...controlledProps,
    ref,
    vertical,
    children: map(children, (child) => {
      const values = getValues();
      const {
        value: childVal,
        onChange: childOnChange
      } = child.props;
      const handler = (e) => handleToggle(childVal, e);
      return React3.cloneElement(child, {
        type,
        name: child.name || name,
        checked: values.indexOf(childVal) !== -1,
        onChange: createChainedFunction_default(childOnChange, handler)
      });
    })
  });
});
var ToggleButtonGroup_default = Object.assign(ToggleButtonGroup, {
  Button: ToggleButton_default
});
export {
  ToggleButtonGroup_default as default
};
//# sourceMappingURL=react-bootstrap_ToggleButtonGroup.js.map
